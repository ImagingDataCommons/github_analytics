# -*- coding: utf-8 -*-
"""googleAnalyticsApiGa4Only.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1XimeqOAcLCOnfEC7t4bXgOWilH3PGh7q

##**Google Analytics 4**

###**Environment Setup**
"""

# Commented out IPython magic to ensure Python compatibility.
# %%capture
# !pip install google-analytics-data

import pandas as pd
import os
from datetime import datetime, timedelta
from google.cloud import bigquery
from google.analytics.data_v1beta import BetaAnalyticsDataClient
from google.analytics.data_v1beta.types import DateRange,Dimension,Metric,RunReportRequest
client = bigquery.Client()

#os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = "googleAnalyticsApiServiceAccount.json"

PROPERTY_DATA = [
    {'property_id': '379011209', 'website': 'discourse'},
    {'property_id': '385143649', 'website': 'learn'},
    {'property_id': '385800898', 'website': 'portal'},
    {'property_id': '361361768', 'website': 'viewer'}
]

# Get yesterday's date
yesterday = datetime.now() - timedelta(days=1)
yesterday_str = yesterday.strftime('%Y-%m-%d')

# Set both start dates to yesterday's date
ga4StartDate = yesterday_str
ga4EndDate = yesterday_str

"""###**Audience Overview**"""

def get_ga4_audience_report(property_id):
    """Queries the Acquisition Report using the Google Analytics Data API v1alpha.

    Args:
        property_id: The GA4 property ID to query.

    Returns:
        The Acquisition Report response.
    """
    # Create a GA4 client
    client = BetaAnalyticsDataClient()

    # Define the request
    request = RunReportRequest(
        property='properties/' + property_id,
        dimensions=[Dimension(name="date"),
                    Dimension(name="country")
                    ],
        metrics=[Metric(name="totalUsers"),
                 Metric(name="newUsers"),
                 Metric(name="sessions"),
                 Metric(name="engagedSessions"),
                 Metric(name="screenPageViews"),
                 Metric(name="averageSessionDuration")
                 ],
        date_ranges=[DateRange(start_date=ga4StartDate, end_date=ga4EndDate)]
    )

    # Execute the request and get the response
    response = client.run_report(request)

    return response

def parse_ga4_audience_report(response, property_id, website):
    """Parses the GA4 Audience Report response into a DataFrame.

    Args:
        response: The GA4 Audience Report response.
        property_id: The GA4 property ID.
        website: The corresponding website name.

    Returns:
        A pandas DataFrame containing the parsed GA4 audience data.
    """
    parsed_data = []

    for row in response.rows:
        dimensions = [dim.value for dim in row.dimension_values]
        metrics = [metric.value for metric in row.metric_values]

        parsed_row = [property_id, website] + dimensions + metrics
        parsed_data.append(parsed_row)

    columns = ['property_id', 'website', 'date', 'country', 'totalUsers', 'newUsers', 'sessions', 'engagedSessions','screenPageViews','averageSessionDuration']

    df = pd.DataFrame(parsed_data, columns=columns)
    return df

# Loop through PROPERTY_DATA
ga4_audience_dfs = []  # Rename the list for clarity

for property_info in PROPERTY_DATA:
    property_id = property_info['property_id']
    website = property_info['website']

    # Call the get_ga4_audience_report function to get the GA4 Audience Report response
    response = get_ga4_audience_report(property_id)

    # Parse the response into a DataFrame
    ga4_audience_df = parse_ga4_audience_report(response, property_id, website)

    # Convert the date column to datetime format
    ga4_audience_df['date'] = pd.to_datetime(ga4_audience_df['date'])

    # Append the parsed DataFrame to the list
    ga4_audience_dfs.append(ga4_audience_df)

# Concatenate all parsed GA4 Audience DataFrames into a single DataFrame
combined_ga4_audience_df = pd.concat(ga4_audience_dfs, ignore_index=True)
# Convert 'sessions' and 'averageSessionDuration' columns to float
combined_ga4_audience_df['sessions'] = combined_ga4_audience_df['sessions'].astype(float)
combined_ga4_audience_df['averageSessionDuration'] = combined_ga4_audience_df['averageSessionDuration'].astype(float)

# Calculate total session duration by multiplying averageSessionDuration by sessions
combined_ga4_audience_df['totalSessionDuration'] = combined_ga4_audience_df['averageSessionDuration'] * combined_ga4_audience_df['sessions']

# Display the combined GA4 Audience DataFrame
combined_ga4_audience_df

# Define the metrics columns and their corresponding display names
metrics_columns_ga4 = {
    'totalUsers': 'Total Users',
    'newUsers': 'New Users',
    'sessions': 'Sessions',
    'engagedSessions' : 'engagedSessions',
    'screenPageViews': 'Screen Page Views',
    'totalSessionDuration': 'totalSessionDuration'
}

# Cast the columns to float before aggregation
for col in metrics_columns_ga4.keys():
    combined_ga4_audience_df[col] = combined_ga4_audience_df[col].astype(float)

# Group the DataFrame by 'website' and 'date', and calculate aggregates for metrics columns
grouped_ga4_audience_df = combined_ga4_audience_df.groupby(['website', 'date'])[list(metrics_columns_ga4.keys())].sum().reset_index()

# Create a list to store rows for the summary table
summary_rows_ga4 = []

# Populate the summary rows
for index, row in grouped_ga4_audience_df.iterrows():
    date = row['date']
    for metric_column, display_name in metrics_columns_ga4.items():
        summary_rows_ga4.append({
            'date': date,
            'aggregate': float(row[metric_column]),
            'metric_name': display_name,
            'website': row['website']
        })

# Create the summary table DataFrame using pandas.concat
ga4_audience_summary_table = pd.concat([pd.DataFrame([row]) for row in summary_rows_ga4], ignore_index=True)

# Display the summary table for GA4 Audience
ga4_audience_summary_table

"""###**Acquisiton Overview**"""

def get_ga4_acquisition_report(property_id):
    """Queries the Acquisition Report using the Google Analytics Data API v1alpha.

    Args:
        property_id: The GA4 property ID to query.

    Returns:
        The Acquisition Report response.
    """
    # Create a GA4 client
    client = BetaAnalyticsDataClient()

    # Define the request
    request = RunReportRequest(
        property='properties/' + property_id,
        dimensions=[Dimension(name="date"),
                    Dimension(name="sessionDefaultChannelGroup"),
                    Dimension(name="sessionSource")
                    ],
        metrics=[Metric(name="totalUsers"),
                 Metric(name="newUsers"),
                 Metric(name="sessions"),
                 Metric(name="engagedSessions"),
                 Metric(name="screenPageViews"),
                 Metric(name="averageSessionDuration")
                 ],
        date_ranges=[DateRange(start_date=ga4StartDate, end_date=ga4EndDate)]
    )

    # Execute the request and get the response
    response = client.run_report(request)

    return response

def parse_ga4_acquisition_report(response, property_id, website):
    """Parses the GA4 Acquisition Report response into a DataFrame.

    Args:
        response: The GA4 Acquisition Report response.
        property_id: The GA4 property ID.
        website: The corresponding website name.

    Returns:
        A pandas DataFrame containing the parsed data.
    """
    parsed_data = []

    for row in response.rows:
        dimensions = [dim.value for dim in row.dimension_values]
        metrics = [metric.value for metric in row.metric_values]

        parsed_row = [property_id, website] + dimensions + metrics
        parsed_data.append(parsed_row)

    columns = ['property_id', 'website', 'date', 'channelGrouping', 'sessionSource',
               'totalUsers', 'newUsers', 'sessions', 'engagedSessions','screenPageViews', 'averageSessionDuration']

    df = pd.DataFrame(parsed_data, columns=columns)
    return df

# Loop through PROPERTY_DATA
ga4_acquisition_dfs = []  # Rename the list for clarity

for property_info in PROPERTY_DATA:
    property_id = property_info['property_id']
    website = property_info['website']

    # Call the get_ga4_acquisition_report function to get the GA4 Acquisition Report response
    response = get_ga4_acquisition_report(property_id)

    # Parse the response into a DataFrame
    ga4_acquisition_df = parse_ga4_acquisition_report(response, property_id, website)

    # Convert the date column to datetime format
    ga4_acquisition_df['date'] = pd.to_datetime(ga4_acquisition_df['date'])

    # Append the parsed DataFrame to the list
    ga4_acquisition_dfs.append(ga4_acquisition_df)

# Concatenate all parsed GA4 Acquisition DataFrames into a single DataFrame
combined_ga4_acquisition_df = pd.concat(ga4_acquisition_dfs, ignore_index=True)

combined_ga4_acquisition_df['sessions'] = combined_ga4_acquisition_df['sessions'].astype(float)
combined_ga4_acquisition_df['averageSessionDuration'] = combined_ga4_acquisition_df['averageSessionDuration'].astype(float)
combined_ga4_acquisition_df['totalSessionDuration'] = combined_ga4_acquisition_df['averageSessionDuration'] * combined_ga4_acquisition_df['sessions']
# Display the combined GA4 Acquisition DataFrame
combined_ga4_acquisition_df

# Define the metrics columns and their corresponding display names for GA4 Acquisition
metrics_columns_ga4 = {
    'totalUsers': 'Total Users',
    'newUsers': 'New Users',
    'sessions': 'Sessions',
    'engagedSessions': 'Engaged Sessions',
    'screenPageViews': 'Screen Page Views',
    'totalSessionDuration': 'Total Session Duration'
}

# Create a dictionary to map metrics to KPI types for GA4 Acquisition
kpi_mapping_ga4 = {
    'totalUsers': 'acquisition',
    'newUsers': 'acquisition',
    'sessions': 'acquisition',
    'engagedSessions': 'acquisition',
    'screenPageViews': 'behavior',
    'totalSessionDuration': 'behavior'
}

# Cast the columns to float before aggregation for GA4 Acquisition
for col in metrics_columns_ga4.keys():
    combined_ga4_acquisition_df[col] = combined_ga4_acquisition_df[col].astype(float)

# Group the DataFrame by multiple columns for GA4 Acquisition
grouped_ga4_acquisition_df = combined_ga4_acquisition_df.groupby([
    'website', 'date', 'channelGrouping', 'sessionSource'
])[list(metrics_columns_ga4.keys())].sum().reset_index()

# Create a list to store rows for the summary table for GA4 Acquisition
summary_rows_ga4 = []

# Populate the summary rows for GA4 Acquisition
for index, row in grouped_ga4_acquisition_df.iterrows():
    date = row['date']
    channel_grouping = row['channelGrouping']
    for metric_column, display_name in metrics_columns_ga4.items():
        kpi = kpi_mapping_ga4.get(metric_column, 'unknown')  # Get KPI type based on metric_column for GA4 Acquisition
        summary_rows_ga4.append({
            'website': row['website'],
            'date': date,
            'channelGrouping': channel_grouping,
            'sessionSource': row['sessionSource'],
            'metric_name': display_name,
            'kpi': kpi,
            'aggregates': float(row[metric_column])
        })

# Create the summary table DataFrame for GA4 Acquisition using pandas.concat
ga4_acquisition_summary_table = pd.DataFrame(summary_rows_ga4)

# Display the summary table for GA4 Acquisition
ga4_acquisition_summary_table

"""###**Behavior Overview**"""

def get_ga4_behavior_report(property_id):
    """Queries the Acquisition Report using the Google Analytics Data API v1alpha.

    Args:
        property_id: The GA4 property ID to query.

    Returns:
        The Acquisition Report response.
    """
    # Create a GA4 client
    client = BetaAnalyticsDataClient()

    # Define the request
    request = RunReportRequest(
        property='properties/' + property_id,
        dimensions=[Dimension(name="date"),
                    Dimension(name="pagePath"),
                    Dimension(name="pageTitle")
                    ],
        metrics=[Metric(name="screenPageViews"),
                 Metric(name="averageSessionDuration"),
                 Metric(name="sessions"),
                 Metric(name="engagedSessions")
                 ],
        date_ranges=[DateRange(start_date=ga4StartDate, end_date=ga4EndDate)]
    )

    # Execute the request and get the response
    response = client.run_report(request)

    return response


def parse_ga4_behavior_report(response, property_id, website):
    """Parses the GA4 Behavior Report response into a DataFrame.

    Args:
        response: The GA4 Behavior Report response.
        property_id: The GA4 property ID.
        website: The corresponding website name.

    Returns:
        A pandas DataFrame containing the parsed GA4 behavior data.
    """
    parsed_data = []

    for row in response.rows:
        dimensions = [dim.value for dim in row.dimension_values]
        metrics = [metric.value for metric in row.metric_values]

        parsed_row = [property_id, website] + dimensions + metrics
        parsed_data.append(parsed_row)

    columns = ['property_id', 'website', 'date', 'pagePath', 'pageTitle', 'screenPageViews',
               'averageSessionDuration', 'sessions', 'engagedSessions']

    df = pd.DataFrame(parsed_data, columns=columns)
    return df

# Loop through PROPERTY_DATA
ga4_behavior_dfs = []  # Rename the list for clarity

for property_info in PROPERTY_DATA:
    property_id = property_info['property_id']
    website = property_info['website']

    # Call the get_ga4_behavior_report function to get the GA4 Behavior Report response
    response = get_ga4_behavior_report(property_id)

    # Parse the response into a DataFrame
    ga4_behavior_df = parse_ga4_behavior_report(response, property_id, website)

    # Convert the date column to datetime format
    ga4_behavior_df['date'] = pd.to_datetime(ga4_behavior_df['date'])

    # Append the parsed DataFrame to the list
    ga4_behavior_dfs.append(ga4_behavior_df)

# Concatenate all parsed GA4 Behavior DataFrames into a single DataFrame
combined_ga4_behavior_df = pd.concat(ga4_behavior_dfs, ignore_index=True)

combined_ga4_behavior_df['sessions'] = combined_ga4_behavior_df['sessions'].astype(float)
combined_ga4_behavior_df['averageSessionDuration'] = combined_ga4_behavior_df['averageSessionDuration'].astype(float)
combined_ga4_behavior_df['totalSessionDuration'] = combined_ga4_behavior_df['averageSessionDuration'] * combined_ga4_behavior_df['sessions']

# Display the combined GA4 Behavior DataFrame
combined_ga4_behavior_df

# Define the metrics columns and their corresponding display names for GA4 Behavior
metrics_columns_ga4 = {
    'screenPageViews': 'Screen Page Views',
    'totalSessionDuration': 'Total Session Duration',
    'sessions': 'Sessions',
    'engagedSessions': 'Engaged Sessions'
}

# Cast the columns to float before aggregation for GA4 Behavior
for col in metrics_columns_ga4.keys():
    combined_ga4_behavior_df[col] = combined_ga4_behavior_df[col].astype(float)

# Group the DataFrame by 'website', 'date', 'pagePath', and 'pageTitle' for GA4 Behavior
grouped_ga4_behavior_df = combined_ga4_behavior_df.groupby([
    'website', 'date', 'pagePath', 'pageTitle'
])[list(metrics_columns_ga4.keys())].sum().reset_index()

# Create a list to store rows for the summary table for GA4 Behavior
summary_rows_ga4_behavior = []

# Populate the summary rows for GA4 Behavior
for index, row in grouped_ga4_behavior_df.iterrows():
    date = row['date']
    for metric_column, display_name in metrics_columns_ga4.items():
        summary_rows_ga4_behavior.append({
            'website': row['website'],
            'date': date,
            'pagePath': row['pagePath'],
            'pageTitle': row['pageTitle'],
            'metric_name': display_name,
            'aggregates': float(row[metric_column])
        })

# Create the summary table DataFrame for GA4 Behavior using pandas.concat
ga4_behavior_summary_table = pd.DataFrame(summary_rows_ga4_behavior)

# Display the summary table for GA4 Behavior
ga4_behavior_summary_table

"""###**Pushing dataframes to Bigquery tables**"""
combined_ga4_audience_df['totalUsers']=combined_ga4_audience_df['totalUsers'].astype(int)
combined_ga4_audience_df['newUsers']=combined_ga4_audience_df['newUsers'].astype(int)
combined_ga4_audience_df['sessions']=combined_ga4_audience_df['sessions'].astype(int)
combined_ga4_audience_df['engagedSessions']=combined_ga4_audience_df['engagedSessions'].astype(int)
combined_ga4_audience_df['screenPageViews']=combined_ga4_audience_df['screenPageViews'].astype(int)

ga4_audience_job_config = bigquery.LoadJobConfig(schema=[
                                            bigquery.SchemaField("property_id", bigquery.enums.SqlTypeNames.STRING),
                                            bigquery.SchemaField("website", bigquery.enums.SqlTypeNames.STRING),
                                            bigquery.SchemaField("date", bigquery.enums.SqlTypeNames.TIMESTAMP),
                                            bigquery.SchemaField("country", bigquery.enums.SqlTypeNames.STRING),
                                            bigquery.SchemaField("totalUsers", bigquery.enums.SqlTypeNames.INT64),
                                            bigquery.SchemaField("newUsers", bigquery.enums.SqlTypeNames.INT64),
                                            bigquery.SchemaField("sessions", bigquery.enums.SqlTypeNames.INT64),
                                            bigquery.SchemaField("engagedSessions", bigquery.enums.SqlTypeNames.INT64),
                                            bigquery.SchemaField("screenPageViews", bigquery.enums.SqlTypeNames.INT64),
                                            bigquery.SchemaField("averageSessionDuration", bigquery.enums.SqlTypeNames.FLOAT64),
                                            bigquery.SchemaField("totalSessionDuration", bigquery.enums.SqlTypeNames.FLOAT64),
                                            ],
                                            #write_disposition="WRITE_TRUNCATE"
                                                        )

ga4_audience_job = client.load_table_from_dataframe(combined_ga4_audience_df, "idc-external-025.logs.google_analytics_ga4_audience" , job_config=ga4_audience_job_config
                                                    )




ga4_audience_summary_job_config = bigquery.LoadJobConfig(schema=[
                                            bigquery.SchemaField("date", bigquery.enums.SqlTypeNames.TIMESTAMP),
                                            bigquery.SchemaField("aggregate", bigquery.enums.SqlTypeNames.FLOAT64),
                                            bigquery.SchemaField("metric_name", bigquery.enums.SqlTypeNames.STRING),
                                            bigquery.SchemaField("website", bigquery.enums.SqlTypeNames.STRING)
                                            ],
                                            #write_disposition="WRITE_TRUNCATE"
                                                         )

ga4_audience_summary_job = client.load_table_from_dataframe(ga4_audience_summary_table, "idc-external-025.logs.google_analytics_ga4_audience_summary", job_config=ga4_audience_summary_job_config)

ga4_acquisition_summary_job_config = bigquery.LoadJobConfig(schema=[
                                            bigquery.SchemaField("website", bigquery.enums.SqlTypeNames.STRING),
                                            bigquery.SchemaField("date", bigquery.enums.SqlTypeNames.TIMESTAMP),
                                            bigquery.SchemaField("channelGrouping", bigquery.enums.SqlTypeNames.STRING),
                                            bigquery.SchemaField("sessionSource", bigquery.enums.SqlTypeNames.STRING),
                                            bigquery.SchemaField("metric_name", bigquery.enums.SqlTypeNames.STRING),
                                            bigquery.SchemaField("kpi", bigquery.enums.SqlTypeNames.STRING),
                                            bigquery.SchemaField("aggregates", bigquery.enums.SqlTypeNames.FLOAT64)
                                            ],
                                            #write_disposition="WRITE_TRUNCATE"
                                            )

ga4_acquisition_df_job = client.load_table_from_dataframe(ga4_acquisition_summary_table, "idc-external-025.logs.google_analytics_ga4_acquisition_summary", job_config=ga4_acquisition_summary_job_config)

ga4_behavior_summary_job_config = bigquery.LoadJobConfig(schema=[
                                            bigquery.SchemaField("website", bigquery.enums.SqlTypeNames.STRING),
                                            bigquery.SchemaField("date", bigquery.enums.SqlTypeNames.TIMESTAMP),
                                            bigquery.SchemaField("pagePath", bigquery.enums.SqlTypeNames.STRING),
                                            bigquery.SchemaField("pageTitle", bigquery.enums.SqlTypeNames.STRING),
                                            bigquery.SchemaField("metric_name", bigquery.enums.SqlTypeNames.STRING),
                                            bigquery.SchemaField("aggregates", bigquery.enums.SqlTypeNames.FLOAT64)
                                            ],
                                            #write_disposition="WRITE_TRUNCATE"
                                             )
ga4_behavior_df_job = client.load_table_from_dataframe(ga4_behavior_summary_table, "idc-external-025.logs.google_analytics_ga4_behavior_summary", job_config=ga4_behavior_summary_job_config)
